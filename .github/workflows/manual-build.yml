name: Manual Build

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: '选择要编译的平台'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - windows
        - linux
        - macos

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: Windows-x86_64
            platform: windows
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: Linux-x86_64-musl
            platform: linux
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            name: Linux-aarch64-musl
            platform: linux
          - target: x86_64-apple-darwin
            os: macos-latest
            name: Darwin-x86_64
            platform: macos
          - target: aarch64-apple-darwin
            os: macos-latest
            name: Darwin-aarch64
            platform: macos
        exclude:
          - platform: ${{ github.event.inputs.platforms == 'windows' && 'linux' || 'exclude-none' }}
          - platform: ${{ github.event.inputs.platforms == 'windows' && 'macos' || 'exclude-none' }}
          - platform: ${{ github.event.inputs.platforms == 'linux' && 'windows' || 'exclude-none' }}
          - platform: ${{ github.event.inputs.platforms == 'linux' && 'macos' || 'exclude-none' }}
          - platform: ${{ github.event.inputs.platforms == 'macos' && 'windows' || 'exclude-none' }}
          - platform: ${{ github.event.inputs.platforms == 'macos' && 'linux' || 'exclude-none' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build frontend
      run: |
        cd web
        npm ci
        npm run build

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust
      uses: Swatinem/rust-cache@v2

    - name: Install cross (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-musl'
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Install musl (Linux x86_64)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    - name: Build
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
          cross build --release --target ${{ matrix.target }} -p bili_sync
        else
          cargo build --release --target ${{ matrix.target }} -p bili_sync
        fi
      shell: bash

    - name: Package
      run: |
        mkdir release
        if [ "${{ runner.os }}" = "Windows" ]; then
          cp target/${{ matrix.target }}/release/bili-sync-rs.exe release/bili-sync-rs-${{ matrix.name }}.exe
          cd release && 7z a bili-sync-rs-${{ matrix.name }}.zip bili-sync-rs-${{ matrix.name }}.exe
        else
          cp target/${{ matrix.target }}/release/bili-sync-rs release/bili-sync-rs-${{ matrix.name }}
          cd release && tar -czf bili-sync-rs-${{ matrix.name }}.tar.gz bili-sync-rs-${{ matrix.name }}
        fi
      shell: bash

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: bili-sync-rs-${{ matrix.name }}
        path: release/bili-sync-rs-${{ matrix.name }}.* 